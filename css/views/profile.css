/**
 * Initialize Profile View: attach listeners and load data
 */
 export function initProfileView() {
  // Load and display user info
  loadProfileData();

  // Handle profile image upload
  document.getElementById('profile-image-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const errorEl = document.getElementById('profile-image-error');
    errorEl.textContent = '';
    const fileInput = document.getElementById('profile-image-input');
    const formData = new FormData();
    formData.append('image', fileInput.files[0]);
    try {
      await apiFetch(`${API_URL}/users/me/profile-image`, {
        method: 'PUT',
        body: formData,
        headers: {} // Let fetch set multipart boundary
      });
      showToast('Profile image updated successfully');
      loadProfileData();
    } catch (err) {
      errorEl.textContent = err.message;
    }
  });

  // Handle profile data update
  document.getElementById('profile-data-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const errorEl = document.getElementById('profile-data-error');
    errorEl.textContent = '';
    const name = document.getElementById('profile-name').value;
    const email = document.getElementById('profile-email').value;
    const password = document.getElementById('profile-password').value;
    const confirm = document.getElementById('profile-confirm-password').value;
    if (password && password !== confirm) {
      errorEl.textContent = 'Passwords do not match';
      return;
    }
    try {
      await apiFetch(`${API_URL}/users/me`, {
        method: 'PUT',
        body: JSON.stringify({ name, email, password })
      });
      showToast('Profile updated successfully');
      loadProfileData();
    } catch (err) {
      errorEl.textContent = err.message;
    }
  });
}

// Helper: fetch and render profile details
async function loadProfileData() {
  try {
    const user = await apiFetch(`${API_URL}/users/me`);
    const profileDetailsDiv = document.getElementById('profile-details');
    profileDetailsDiv.innerHTML = `
      <img src="${user.profileImage || 'https://via.placeholder.com/150'}" alt="Profile Image" />
      <h3>${user.name}</h3>
      <p>${user.email}</p>
    `;
    // Prefill fields
    document.getElementById('profile-name').value = user.name || '';
    document.getElementById('profile-email').value = user.email || '';
  } catch (error) {
    console.error('Error loading profile data:', error);
  }
}

/* css/views/profileView.css */
#profile-view {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
  background-color: #4f1f1f;
}
.profile-container {
  display: flex;
  gap: 2rem;
  width: 800px;
  margin: 2rem auto;
  background-color: #5f2f2f;
  padding: 2rem;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
}
.profile-details {
  flex: 1;
  text-align: center;
  border-right: 2px solid #fff;
  padding-right: 1rem;
}
.profile-details img {
  width: 140px;
  height: 140px;
  border-radius: 50%;
  object-fit: cover;
  margin-bottom: 1rem;
  border: 2px solid #fff;
}
.profile-details h3 {
  font-size: 1.8rem;
  margin-bottom: 0.5rem;
  color: #fff;
}
.profile-details p {
  font-size: 1.1rem;
  margin-bottom: 0.5rem;
  color: #fff;
}
.profile-forms {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 2rem;
}
.profile-form {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}
.profile-form label {
  font-weight: bold;
  margin-bottom: 0.3rem;
  color: #fff;
}
.profile-form input[type='text'],
.profile-form input[type='email'],
.profile-form input[type='password'],
.profile-form input[type='file'] {
  padding: 0.5rem;
  border: none;
  border-radius: 4px;
  background-color: #3e1717;
  color: #fff;
}
.profile-form button {
  background-color: #7f4f4f;
  color: #fff;
  border: none;
  padding: 0.7rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
  margin-top: 0.5rem;
}
.profile-form button:hover {
  background-color: #9f6f6f;
}
